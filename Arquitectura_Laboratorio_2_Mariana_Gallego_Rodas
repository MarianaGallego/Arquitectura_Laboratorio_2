.data

	inputFile: .asciiz "C:/Users/maria/OneDrive/Escritorio/Arquitectura_Laboratorio_2/input.txt"
	outputFile: .asciiz "C:/Users/maria/OneDrive/Escritorio/Arquitectura_Laboratorio_2/criptogram.txt"
	mensajeAEncriptar: .space 1024

	ClaveMultiplicativa: .asciiz "Digite la clave multiplicativa. : "
	ClaveAditiva: .asciiz "\n Digite la clave aditiva que desea utilizar: "

	MensajeDeErrorDocumento: .asciiz "No se pudo leer el documento"
	MensajeDeErrorCantidadBytes: .asciiz "La cantidad de Bytes en el documento excede el valor máximo permitido"

.text
	main:
	
		#Ingresar mensaje
		jal leerMensaje
	
		#Ingresar claves
		jal leerClaves
		
		#Encriptar mensaje
		jal encriptarMensaje
		
		#Generar documento
		jal generarDocumento
	
	li $v0, 10
	syscall
	
	
	
	
	

	#---------------------------------------- DECLARACIÓN DE FUNCIONES ----------------------------------------#

	leerClaves:

		#---------------------- Clave multiplicativa ----------------------#

		li $v0, 4
		la $a0, ClaveMultiplicativa
		syscall
		
		li $v0, 5
		syscall
		
		addi $sp, $sp, -4
		sb $v0, 0($sp)

		
		#------------------------- Clave aditiva -------------------------#

		li $v0, 4
		la $a0, ClaveAditiva
		syscall
		
		li $v0, 5
		syscall
		
		addi $sp, $sp, -4
		sb $v0, 0($sp)
	jr $ra
	


	leerMensaje:

		#------------------------- Abrir archivo -------------------------#

    		li $v0, 13
    		la $a0, inputFile
    		li $a1, 0
    		li $a2, 0
    		syscall
    		move $t0, $v0

    		
    		bltz $t0, errorHandlerDocumento
    		
    		#------------------------- Leer archivo -------------------------#

    		li $v0, 14
    		move $a0, $t0
    		la $a1, mensajeAEncriptar
    		li $a2, 1024
    		syscall
    		
    		#------------------------- Llamar validador -------------------------#
    		move $t8, $ra
    		
    		la $a3, mensajeAEncriptar
    		jal validarCantidadBytes
    		
    		move $ra, $t8

		#----------------- Guardar cada byte en la pila -----------------#
		la $t1, mensajeAEncriptar
		add $sp, $sp, $t4
		li $t2, 0

		storeWhile:
			lb $t3, 0($t1)
			sb $t3, 0($sp)

			addi $t1, $t1, 1
			addi $sp, $sp, 1
			addi $t2, $t2, 1
		
			beqz $t3, endStoreWhile
		
			j storeWhile
		endStoreWhile:

		sub $sp, $sp, $t2
		
	jr $ra
	
	
	validarCantidadBytes:
	
		li $t4, 0
    		move $t5, $a3
    		
    		contarLoop:
			lb $t6, 0($t5)
			beq $t6, 0, endContarLoop
		
			addi $t4, $t4, 1
			addi $t5, $t5, 1
			j contarLoop
		endContarLoop:
		
		li $t7, 1025
		slt $t9, $t7, $t4
			bne $t9, $zero, else
				jr $ra	
			else:
				j errorHandlerCantidadBytes
				
	jr $ra
	
	
	encriptarMensaje:
	
		addi $s0, $sp, 8
	
		lb $t0, 0($sp)
		lb $t1, 4($sp)
		
		add $t2, $zero, $zero
		
		encryptWhile:
			add $t3, $t2, $s0
			
			lb $t4, 0($t3)
			beq $t4, $zero, endEncryptWhile
			
    			li $t5, 97
    			sub $t6, $t4, $t5
    		
    		
    			#----------------- Validar mayúsculas y minúsculas -----------------#
    			   			
    			slt $t8, $t6, $zero
    			bne $t8, $zero, elseCondicional	

    				mul $t6, $t6, $t1
    				add $t6, $t6, $t0
    				li $t7, 26
    				rem $t6, $t6, $t7

    				add $t4, $t6, $t5
    					
    			j endCondicional
    			elseCondicional:
    					
    				sub $t6, $t4, 65
    					
    				mul $t6, $t6, $t1
    				add $t6, $t6, $t0
    				li $t7, 26
    				rem $t6, $t6, $t7

    				addi $t4, $t6, 65
    					
    			endCondicional:
			
			li $v0, 11
			move $a0, $t4
			syscall
			
			sb $a0, 0($t3)
			
			addi $t2, $t2, 1
			j encryptWhile
		endEncryptWhile:
	
	jr $ra
	
	
	generarDocumento:
	
    		li $v0, 13
    		la $a0, outputFile
    		li $a1, 1
    		li $a2, 0 
    		syscall
    		move $t0, $v0

    		bltz $t0, errorHandlerDocumento

    		addi $t1, $sp, 8
    		writeLoop:
        		lb $a1, 0($t1)
        		beqz $a1, endWrite

        		addi $sp, $sp, -4
        		sb $a1, 0($sp)

        		li $v0, 15
        		move $a0, $t0
        		la $a1, 0($sp)
        		li $a2, 1
        		syscall

        		addi $sp, $sp, 4

        		addi $t1, $t1, 1
        		j writeLoop

    		endWrite:
 
        	li $v0, 16
        	move $a0, $t0
        	syscall
	jr $ra
	



	#--------------------------------------------- ERROR HANDLERS ---------------------------------------------#
	
	errorHandlerDocumento:
	
		li $v0, 4
    		la $a0, MensajeDeErrorDocumento
    		syscall
    		
    		li $v0, 10
    		syscall
    		
	jr $ra
	
	errorHandlerCantidadBytes:
	
		li $v0, 4
    		la $a0, MensajeDeErrorCantidadBytes
    		syscall
    		
    		li $v0, 10
    		syscall
    		
	jr $ra